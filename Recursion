# printing 1 to n
    #method1
    public static void printSeq(int i, int n) {
        if(i>n) {
            return;
        }
        System.out.println(i);
        printSeq(i+1,n);
    }
    #method2
    static void printNum1(int n){
        if (n==0){
            return;
        }
        printNum1(n-1);            ‚ô°‚ô°
        System.out.println(n);     ‚ô°‚ô°
    }
# printing n to 1
    #method1
    static void printReverse1(int n){
        if (n==0){
            return;
        }
        System.out.println(n);
        printReverse1(n-1);
    }
    #method2
    static void printReverse2(int n, int m){
        if (n==m+1){
            return;
        }
        printReverse2(n+1,m);
        System.out.println(n);
    }
# sum of n natural numbers
    #method1
    static int natSum2(int n){
        if (n==0) {
            System.out.print("Sum of natural numbers: ");
            return 0;
        }
        return n+natSum2(n-1);
    }
    #method2
    static void natSum(int n, int sum){
        if (n==0){
            System.out.println("Sum of natural numbers: "+sum);
            return;
        }
        sum+=n;
        natSum(n-1,sum);
    }
# printing table of a number n till number m
    static void printTable(int n, int m){
        if (m==0){
            return;
        }
        printTable(n,m-1);
        System.out.printf("%dx%d=%d\n",n,m,n*m);
    }
# to know the nth term of fibonacci series
    static int fiboTerm(int n){
        if (n==1 || n==2){
            return n-1;
        }
        return fiboTerm(n-1)+fiboTerm(n-2);
    }
# to print the fibonacci series till nth term
    #method1‚ù§Ô∏è‚ù§Ô∏è (selfmade‚ù§Ô∏è‚Äçüî•)
    static void printFibo(int a, int b, int i, int n){
        if (i==1 || i==2) {
            System.out.println(i - 1);
            printFibo(a, b, i + 1, n);
        }
        else if (i<=n){
            int c = a + b;
            System.out.println(c);
            printFibo(b, c, i + 1, n);
        }
        else {
            return;  #// this return is not necessary
        }           #// else block completely can be neglected from here
    }
    public static void printFib(int a, int b, int n) {
        if(n==0) {
            return;
        }
        System.out.println(a);
        int c=a+b;
        printFib(b,c,n-1);
    }
    #method2 (vague)
    static void printFib(int a, int b, int n, int i){
        if (i==2)
            return;
        else if (n==i)
            System.out.println(a+"\n"+b);
        int c=a+b;
        System.out.println(c);
        printFib(b,c,n,i-1);
    }
# to know the value of n!
    #method1
    static int fac(int n){
        if (n==0){
            return 1;
        }
        return n*fac(n-1);
    }
    #method2
    static void fact(int n, int fac){
        if (n==0){
            System.out.printf("factorial: %d",fac);
            return;
        }
        fac*=n;
        fact(n-1,fac);
    }
# to know the value of x^n
    #method1
    #üëæstack height=n
    static int expo(int x, int n){
        if (x==0){
            return 0;
        }
        if (n==0){
            return 1;
        }
        return x*expo(x,n-1);
    }
    #üëæstack height=log2(n)
    #method2
    static void expon(int x, int n, int r){
        if (x==0){
            r=0;
            System.out.println(r);
            return;
        }
        if (n==0){
            System.out.println(r);
            return;
        }
        r*=x;
        expon(x,n-1,r);
    }
# tower of hanoi
    static void towerOfHanoi(int n,String sou, String hel, String des){
        if (n==0){
            return;
        }
        towerOfHanoi(n-1, sou, des, hel);
        System.out.println("transfer disk "+n+" from "+sou+" to "+des);
        towerOfHanoi(n-1, hel, sou, des);
    }
# printing a string in reverse
    static void stringReverse (String word, int n){
        if (n==-1){
            return;
        }
        System.out.print(word.charAt(n));
        stringReverse(word,n-1);
    }
# is array sorted? (strictly increasing)
    static boolean isSorted(int arr[], int n) {
        if(n==arr.length-1) {
            return true;
        }
        if(arr[n]>=arr[n+1]) {
            return false;
        }
        return isSorted(arr,n+1);
    }
# moving a desired element to the last (fails when copies are together placed inside the string)
    static void movingInAString(StringBuilder word, char desElement, int n, int counter) {
        if(n==word.length()-1) {
            for(int i=1; i<=counter; i++) {
                word.append(desElement);
            }
            System.out.println(word);
            return;
        }
        if(desElement==word.charAt(n)) {
            counter+=1;
            word.deleteCharAt(n);
        }
        movingInAString(word,desElement,n+1,counter);
    }
# moving a desired element to the last
    #method1
    static String movingAChar(String word, char desEle, int n, int counter, String newWord) {
        if(n==word.length()) {
            for(int i=0; i<counter; i++) {
                newWord+=desEle;
            }
            return newWord;
        }
        if(desEle==word.charAt(n)) {
            counter+=1;
        }
        else {
            newWord+=word.charAt(n);
        }
        return movingAChar(word,desEle,n+1,counter,newWord);
    }
    #method2
    static StringBuilder movingCharToLast(String word, char desEle, int n, int counter, StringBuilder newWord) {
        if(n==word.length()) {
            for(int i=0; i<counter; i++) {
                newWord.append(desEle);
            }
            return newWord;
        }
        if(desEle==word.charAt(n)) {
            counter+=1;
        }
        else {
            newWord.append(word.charAt(n));
        }
        return movingCharToLast(word,desEle,n+1,counter,newWord);
    }
# removing duplicate chars from a string
    # mymethod‚ù§Ô∏è
    static boolean[] mapping=new boolean[26];
    static String removeDuplicate(String word, int n, String newWord) {
        if(n==word.length()) {
            return newWord;
        }
        char currChar=word.charAt(n);
        if(!map[currChar-'a']) {
            newWord+=currChar;
            map[currChar-'a']=true;
        }
        return removeDuplicate(word,n+1,newWord);
    }
    # ma'am method
    public static boolean[] map = new boolean[26];
    public static void removeDuplicates(String str, int idx, String newString) {
        if(idx==str.length()) {
            System.out.println(newString);
            return;
        }
        char currChar = str.charAt(idx);
        if(map[currChar-'a']) {
            removeDuplicates(str, idx+1, newString);
        }
        else {
            newString+=currChar;
            map[currChar-'a']=true;
            removeDuplicates(str, idx+1, newString);
        }
    }
# printing all the possible subsequences
    static void subsequences(String str, int idx, String newStr) {
        if(idx==str.length()) {
            System.out.println(newStr);
            return;
        }
        subsequences(str,idx+1,newStr+str.charAt(idx));
        subsequences(str, idx+1, newStr);
    }
# linear search using recursion
    static int []list={35,85,95,34,7,85};
    static void linearSearch(int toSearch, int idx) {
        if(idx==list.length-1) {
            System.out.println("Not found");
            return;
        }
        if(list[idx]==toSearch) {
            System.out.println("Found at "+idx);
            return;
        }
        linearSearch(toSearch,idx+1);
    }
# keypad combinations
    static String [] keypad={".","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"};
    static void keypadCombo(String str, String theCombo, int idx){
        if(idx==str.length()) {
            System.out.println(theCombo);
            return;
        }
        char currChar = str.charAt(idx);
        String mapping =keypad[currChar-'0'];
        for(int i=0; i<mapping.length(); i++) {
            keypadCombo(str,theCombo+mapping.charAt(i),idx+1);
        }
    }
