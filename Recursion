# printing 1 to n
    #method1
    static void printNum2(int n, int m){
        if (n==m+1){
            return;
        }
        System.out.println(n);
        printNum2(n+1, m);
    }
    #method2
    static void printNum1(int n){
        if (n==0){
            return;
        }
        printNum1(n-1);
        System.out.println(n);
    }
# printing n to 1
    #method1
    static void printReverse1(int n){
        if (n==0){
            return;
        }
        System.out.println(n);
        printReverse1(n-1);
    }
    #method2
    static void printReverse2(int n, int m){
        if (n==m+1){
            return;
        }
        printReverse2(n+1,m);
        System.out.println(n);
    }
# sum of n natural numbers
    #method1
    static int natSum2(int n){
        if (n==0) {
            System.out.print("Sum of natural numbers: ");
            return 0;
        }
        return n+natSum2(n-1);
    }
    #method2
    static void natSum(int n, int sum){
        if (n==0){
            System.out.println("Sum of natural numbers: "+sum);
            return;
        }
        sum+=n;
        natSum(n-1,sum);
    }
# printing table of a number n till number m
    static void printTable(int n, int m){
        if (m==0){
            return;
        }
        printTable(n,m-1);
        System.out.printf("%dx%d=%d\n",n,m,n*m);
    }
# to know the nth term of fibonacci series
    static int fiboTerm(int n){
        if (n==1 || n==2){
            return n-1;
        }
        return fiboTerm(n-1)+fiboTerm(n-2);
    }
# to print the fibonacci series till nth term
    #method1‚ù§Ô∏è‚ù§Ô∏è (selfmade‚ù§Ô∏è‚Äçüî•)
    static void printFibo(int a, int b, int i, int n){
        if (i==1 || i==2) {
            System.out.println(i - 1);
            printFibo(a, b, i + 1, n);
        }
        else if (i<=n){
            int c = a + b;
            System.out.println(c);
            printFibo(b, c, i + 1, n);
        }
        else {
            return;  #// this return is not necessary
        }           #// else block completely can be neglected from here
    }
    #method2 (vague)
    static void printFib(int a, int b, int n, int i){
        if (i==2)
            return;
        else if (n==i)
            System.out.println(a+"\n"+b);
        int c=a+b;
        System.out.println(c);
        printFib(b,c,n,i-1);
    }
# to know the value of n!
    #method1
    static int fac(int n){
        if (n==0){
            return 1;
        }
        return n*fac(n-1);
    }
    #method2
    static void fact(int n, int fac){
        if (n==0){
            System.out.printf("factorial: %d",fac);
            return;
        }
        fac*=n;
        fact(n-1,fac);
    }
# to know the value of x^n
    #method1
    #üëæstack height=n
    static int expo(int x, int n){
        if (x==0){
            return 0;
        }
        if (n==0){
            return 1;
        }
        return x*expo(x,n-1);
    }
    #üëæstack height=log2(n)
    #method2
    static void expon(int x, int n, int r){
        if (x==0){
            r=0;
            System.out.println(r);
            return;
        }
        if (n==0){
            System.out.println(r);
            return;
        }
        r*=x;
        expon(x,n-1,r);
    }
# tower of hanoi
    static void towerOfHanoi(int n,String sou, String hel, String des){
        if (n==0){
            return;
        }
        towerOfHanoi(n-1, sou, des, hel);
        System.out.println("transfer disk "+n+" from "+sou+" to "+des);
        towerOfHanoi(n-1, hel, sou, des);
    }
# printing a string in reverse
    static void stringReverse (String word, int n){
        if (n==-1){
            return;
        }
        System.out.print(word.charAt(n));
        stringReverse(word,n-1);
    }
