//input a number and then input numbers to know is it prime number times
    public static Scanner sc=new Scanner(System.in);
    public static void isPrime(int t) {
        for(int i=0; i<t; i++) {
            boolean IsPrime=true;
            int n=sc.nextInt();
            for(int j=2; j*j<=n; j++) {
                if(n%j==0) {
                    IsPrime=false;
                    break;
                }
            }
            if(IsPrime) {
                System.out.println(n+" is Prime!!");
            }
            else {
                System.out.println(n+" is NOT Prime!!");
            }
        }
    }
//Print all Prime Numbers till N
    public static Scanner sc=new Scanner(System.in);
    public static void printPrimeBtw(int h, int l) {
        for(int i=l; i<=h; i++) {
            boolean isPrime=true;
            for(int j=2; j*j<=i; j++) {
                if(i%j==0) {
                    isPrime=false;
                    break;
                }
            }
            if(isPrime) {
                System.out.println(i);
            }
        }
    }
//Print all Fibonacci Numbers till N
    public static void printFib(int n) {
        int a=0;
        int b=1;
        System.out.println(a);
        System.out.println(b);
        for(int i=0; i<n-2; i++) {
            int c=a+b;
            System.out.println(c);
            a=b;
            b=c;
        }
    }
//count digits
    //m1
    public static int countDigits(long n) {
        String len = "" + n;
        return len.length();
    }
    //m2
    public static int digitCount(long n) {
        int i = 0;
        while (n != 0) {
            n /= 10;
            i++;
        }
        return i;
    }
//print digits
    public static void printDigits(int n) {
        int m = n;
        int i = 0;
        while (m != 0) {
            m /= 10;
            i++;
        }
        int div = 1;
        while (i != 0) {
            div = (int) Math.pow(10, i - 1);
            int dig = n / div;
            System.out.println(dig);
            n %= div;
            i--;
        }
    }
//print the digits in reverse
    public static void printReverseDigits(int n) {
        while (n != 0) {
            int dig = n % 10;
            System.out.print(dig);
            n /= 10;
        }
    }
//print the digits in so called inverse
    public static void printInverse(int n) {
        int m = 0;
        int i = 0;
        while (n != 0) {
            i++;
            int dig = n % 10;
            m += (int) (i * Math.pow(10, dig - 1));
            n /= 10;
        }
        System.out.println(m);
    }
//rotate a number n by k times
    public static void rotateNumber(int n, int k) {
        int i = 0;
        int m = n;
        while (m != 0) {
            m /= 10;
            i++;
        }
        if (k % i == 0) {
            k = 0;
        } else if (k < -i) {
            int a = k / i - 1;
            k += (-a) * i;
        } else if (k > i) {
            int a = k / i;
            k -= a * i;
        }
        int p = (int) (Math.pow(10, k));
        int dig = n % p;
        n /= p;
        n += (int)(dig*Math.pow(10, i-k));
        System.out.println(n);
    }
//print GCD and LCM
    public static void printGcdLcm(int n1, int n2) {
        int on1=n1;
        int on2=n2;
        while(n2!=0) {
            int rem=n1%n2;
            n1=n2;
            n2=rem;
        }
        int gcd=n1;
        int lcm=(on1*on2)/gcd;
        System.out.println("GCD: "+gcd);
        System.out.println("LCM: "+lcm);
    }
//print all prime factors of a number
    public static void primeFactorisation(int n) {
        int i=2;
        while(n!=1) {
            if(n%i==0) {
                System.out.print(i+" ");
                n/=i;
            }
            else {
                i++;
            }
        }
    }
