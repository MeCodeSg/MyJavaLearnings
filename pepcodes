//input a number and then input numbers to know is it prime number times
    public static Scanner sc=new Scanner(System.in);
    public static void isPrime(int t) {
        for(int i=0; i<t; i++) {
            boolean IsPrime=true;
            int n=sc.nextInt();
            for(int j=2; j*j<=n; j++) {
                if(n%j==0) {
                    IsPrime=false;
                    break;
                }
            }
            if(IsPrime) {
                System.out.println(n+" is Prime!!");
            }
            else {
                System.out.println(n+" is NOT Prime!!");
            }
        }
    }
//Print all Prime Numbers between h and l
    public static Scanner sc=new Scanner(System.in);
    public static void printPrimeBtw(int h, int l) {
        for(int i=l; i<=h; i++) {
            boolean isPrime=true;
            for(int j=2; j*j<=i; j++) {
                if(i%j==0) {
                    isPrime=false;
                    break;
                }
            }
            if(isPrime) {
                System.out.println(i);
            }
        }
    }
//Print all Fibonacci Numbers till N
    public static void printFib(int n) {
        int a=0;
        int b=1;
       int c;
        for(int i=1; i<=n; i++) {
            System.out.print(a+" ");
            c=a+b;
            a=b;
            b=c;
        }
    }
//count digits
    //m1
    public static int countDigits(long n) {
        String len = "" + n;
        return len.length();
    }
    //m2
    public static int digitCount(long n) {
        int i = 0;
        while (n != 0) {
            n /= 10;
            i++;
        }
        return i;
    }
//print digits
    public static void printDigits(int n) {
        int m = n;
        int i = 0;
        while (m != 0) {
            m /= 10;
            i++;
        }
        int div = 1;
        while (i != 0) {
            div = (int) Math.pow(10, i - 1);
            int dig = n / div;
            System.out.println(dig);
            n %= div;
            i--;
        }
    }
    //efficient method
    public static void printDigits(int n) {
        int count=digitCount(n);
        int div=(int)Math.pow(10, count-1);
        while(div!=0) {
            int dig=n/div;
            n%=div;
            System.out.print(dig+" ");
            div/=10;
        }
    }
//print the digits in reverse
    public static void ReverseDigits(int n) {
        while (n != 0) {
            int dig = n % 10;
            System.out.print(dig);
            n /= 10;
        }
    }
    ## This doesn't resolves numbers like '23400'
    public static int reverseDigits(int n) {
        int count=digitCount(n);
        int p=(int)Math.pow(10, count-1);
        int r=0;
        while(n!=0) {
            int dig=n%10;
            n/=10;
            r+=dig*p;
            p/=10;
        }
        return r;
    }
//print the digits in so called inverse
    public static void printInverse(int n) {
        int m = 0;
        int i = 0;
        while (n != 0) {
            i++;
            int dig = n % 10;
            m += (int) (i * Math.pow(10, dig - 1));
            n /= 10;
        }
        System.out.println(m);
    }
//rotate a number n by k times❤️❤️
    public static int rotateDigits(int n, int k) {
        int count=digitCount(n);
        k%=count;
        if(k<0) {
            k+=count;
        }
        int mul=(int)Math.pow(10, count-k);
        int div=(int)Math.pow(10, k);
        int dig=n%div;
        n/=div;
        int r=n+dig*mul;
        return r;
    }
//print GCD and LCM
    public static void printGcdLcm(int n1, int n2) {
        int on1=n1;
        int on2=n2;
        while(n2!=0) {
            int rem=n1%n2;
            n1=n2;
            n2=rem;
        }
        int gcd=n1;
        int lcm=(on1*on2)/gcd;
        System.out.println("GCD: "+gcd);
        System.out.println("LCM: "+lcm);
    }
    public static void printGCD(int m, int n) {
        int a=m;
        int b=n;
        int r;
        while(m!=0) {
            r=n%m;
            n=m;
            m=r;
        }
        System.out.println(n);
        System.out.println(a*b/n);
    }
//print all prime factors of a number❤️❤️
    public static void primeFactorisation(int n) {
        for(int i=2; i*i<=n; i++) {
            while(n%i==0) {
                n/=i;
                System.out.print(i+" ");
            }
        }
        if(n!=1) {
            System.out.print(n);
        }
    }
# Patterns
easy{{ //pat1
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i; j++) {
        System.out.print("*");
    }
    System.out.println();
}
//pat2
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i+1; j++) {
        System.out.print("*");
    }
    System.out.println();
}
//pat3
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i; j++) {
        System.out.print(" ");
    }
    for(int j=1; j<=i; j++) {
        System.out.print("*");
    }
    System.out.println();
}
//pat4
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i-1; j++) {
        System.out.print(" ");
    }
    for(int j=1; j<=n-i+1; j++) {
        System.out.print("*");
    }
    System.out.println();
} }}
//pat5
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i; j++) {
        System.out.print(" \t");
    }
    for(int j=1; j<=2*i-1; j++) {
        System.out.print("*\t");
    }
    System.out.println();
}
n-=1;
for(int i=n; i>=1; i--) {
    for(int j=1; j<=n-i+1; j++) {
        System.out.print(" \t");
    }
    for(int j=1; j<=2*i-1; j++) {
        System.out.print("*\t");
    }
    System.out.println();
}
//pat6
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i; j++) {
        System.out.print("*\t");
    }
    for(int j=1; j<=2*i-1; j++) {
        System.out.print(" \t");
    }
    for(int j=1; j<=n-i; j++) {
        System.out.print("*\t");
    }
    System.out.println();
}
n-=1;
for(int i=n; i>=1; i--) {
    for(int j=1; j<=n-i+1; j++) {
        System.out.print("*\t");
    }
    for(int j=1; j<=2*i-1; j++) {
        System.out.print(" \t");
    }
    for(int j=1; j<=n-i+1; j++) {
            System.out.print("*\t");
    }
    System.out.println();
}
//pat7
#m1
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i-1; j++) {
        System.out.print(" \t");
    }
    System.out.print("*\t\n");
}
#m2💕
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n; j++) {
        if(i==j) {
            System.out.print("*\t");
        }
        else {
            System.out.print(" \t");
        }
    }
    System.out.println();
}
//pat8
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i; j++) {
        System.out.print(" \t");
    }
    System.out.print("*\t\n");
}
#m2💕
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n; j++) {
        if(i+j==n+1) {
            System.out.print("*\t");
        }
        else {
            System.out.print(" \t");
        }
    }
    System.out.println();
}
//pat9
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i-1; j++) {
        System.out.print(" \t");
    }
    System.out.print("*\t");
    for(int j=1; j<=2*(n-i)-1; j++) {
        System.out.print(" \t");
    }
    if(i!=n) {
        System.out.print("*\t");
    }
    System.out.println();
}
n-=1;
for(int i=n; i>=1; i--) {
    for(int j=1; j<=i-1; j++) {
        System.out.print(" \t");
    }
    System.out.print("*\t");
    for(int j=1; j<=2*(n-i)+1; j++) {
        System.out.print(" \t");
    }
    System.out.print("*\t");
    System.out.println();
}
#m2💕
if(n%2==0) {
    System.out.println("n should be ODD only!!");
    return;
}
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n; j++) {
        if(i+j==n+1 || i==j) {
            System.out.print("*\t");
        }
        else {
            System.out.print(" \t");
        }
    }
    System.out.println();
}
//pat10
#m1
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i; j++) {
        System.out.print(" ");
    }
    for(int j=1; j<=2*i-1; j++) {
        if(j==1 || j==2*i-1) {
            System.out.print("*");
        }
        else {
            System.out.print(" ");
        }
    }
    System.out.println();
}
for(int i=1; i<=n-1; i++) {
    for(int j=1; j<=i; j++) {
        System.out.print(" ");
    }
    for(int j=1; j<=2*(n-i)-1; j++) {
        if(j==1 || j==2*(n-i)-1) {
            System.out.print("*");
        }
        else {
            System.out.print(" ");
        }
    }
    System.out.println();
}
#m2💕
if(n%2==0) {
    System.out.println("n should be ODD only!!");
    return;
}
int osp=n/2;
int isp=-1;
for(int i=1; i<=n; i++) {
    for(int j=1; j<=osp; j++) {
        System.out.print(" \t");
    }
    System.out.print("*\t");
    for(int j=1; j<=isp; j++) {
        System.out.print(" \t");
    }
    if(i!=1 && i!=n) {
        System.out.print("*\t");
    }
    System.out.println();
    if(i<=n/2) {
        osp--;
        isp+=2;
    }
    else {
        osp++;
        isp-=2;
    }
}
//pat11
int k=1;
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i; j++) {
        System.out.print(k+" ");
        k++;
    }
    System.out.println();
}
//pat12
int a=0;
int b=1;
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i; j++) {
        System.out.print(a+" ");
        int c=a+b;
        a=b;
        b=c;
    }
    System.out.println();
}
//pat13💕💕
for(int i=0; i<n; i++) {
    int ncr=1;
    for(int j=0; j<=i; j++) {
        System.out.print(ncr+" ");
        ncr=ncr*(i-j)/(j+1);
    }
    System.out.println();
    }
//pat14
for(int i=1; i<=10; i++) {
    System.out.println(n+"*"+i+"="+n*i);
}
//pat15
#m1
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n-i; j++) {
        System.out.print(" \t");
    }
    for(int j=i; j<2*i; j++) {
        System.out.print(j+"\t");
    }
    for(int j=2*(i-1); j>=i; j--) {
        System.out.print(j+"\t");
    }
    System.out.println();
}
for(int i=1; i<n; i++) {
    for(int j=1; j<=i; j++) {
        System.out.print(" \t");
    }
    for(int j=n-i; j<2*(n-i); j++) {
        System.out.print(j+"\t");
    }
    for(int j=2*(n-i-1); j>=n-i; j--) {
        System.out.print(j+"\t");
    }
    System.out.println();
}
#m2💕💕
if(n%2==0) {
    System.out.println("n should be ODD only!!");
    return;
}
int sp=n/2;
int vali=1;
for(int i=1; i<=n; i++) {
    for(int j=1; j<=sp; j++) {
        System.out.print(" \t");
    }
    int valj=vali;
    for(int j=1; j<=2*vali-1; j++) {
        System.out.print(valj+"\t");
        if(j<=(2*vali-1)/2) {
            valj++;
        }
        else {
            valj--;
        }
    }
    if(i<=n/2) {
        vali++;
        sp--;
    }
    else {
        vali--;
        sp++;
    }
    System.out.println();
}
//pat16
for(int i=1; i<=n; i++) {
    for(int j=1; j<=i; j++) {
        System.out.print(j+"\t");
    }
    for(int j=1; j<=2*(n-i)-1; j++) {
        System.out.print(" \t");
    }
    for(int j=i; j>=1; j--) {
        if(i!=n || j!=n) {
            System.out.print(j+"\t");
        }
    }
    System.out.println();
}
//pat17
if(n%2==0) {
    System.out.println("n should be ODD only!!");
    return;
}
int st=1;
for(int i=1; i<=n; i++) {
    for(int j=1; j<=n/2; j++) {
        if(i==n/2+1) {
            System.out.print("*\t");
        }
        else {
            System.out.print(" \t");
        }
    }
    for(int j=1; j<=st; j++) {
        System.out.print("*\t");
    }
    if(i<=n/2) {
        st++;
    }
    else {
        st--;
    }
    System.out.println();
}
//pat18
if(n%2==0) {
    System.out.println("n should be ODD only!!");
    return;
}
int sp=0;
int st=n;
for(int i=1; i<=n; i++) {
    for(int j=1; j<=sp; j++) {
        System.out.print(" \t");
    }
    for(int j=1; j<=st; j++) {
        if(i>1 && i<=n/2 && j>1 && j<st) {
            System.out.print(" \t");
        }
        else {
            System.out.print("*\t");
        }
    }
    System.out.println();
    if(i<=n/2) {
        st-=2;
        sp++;
    }
    else {
        st+=2;
        sp--;
    }
}
//pat19
//pat20
//digt frequency
    public static int digitFrequency(int n, int d) {
        int f=0;
        while(n!=0) {
            int dig=n%10;
            n/=10;
            if(dig==d) {
                f++;
            }
        }
        return f;
    }
//decimal to any base conversion
public static int decimalToAnyBase(int n, int b) {
    int c=1;
    int base=0;
    while(n!=0) {
        int dig=n%b;
        base+=dig*c;
        n/=b;
        c*=10;
    }
    return base;
}
//any base to decimal conversion
public static int anyBaseToDecimal(int n, int b) {
    int c=1;
    int decimal=0;
    while(n!=0) {
        int dig=n%10;
        decimal+=dig*c;
        n/=10;
        c*=2;
    }
    return decimal;
}
//any base to any base conversion
public static int anyBaseToAnyBase(int n, int b1, int b2) {
    int deci=anyBaseToDecimal(n,b1);
    int result=decimalToAnyBase(deci,b2);
    return result;
}
